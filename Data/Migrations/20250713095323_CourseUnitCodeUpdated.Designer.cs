// <auto-generated />
using System;
using ExamTimeTable.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamTimeTable.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250713095323_CourseUnitCodeUpdated")]
    partial class CourseUnitCodeUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamTimeTable.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvigilatorId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProgrammeId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InvigilatorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProgrammeId");

                    b.HasIndex("YearId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ExamTimeTable.Models.CourseUnit", b =>
                {
                    b.Property<int>("CourseUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseUnitId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("CourseUnitId");

                    b.ToTable("CourseUnits");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ExamTimeTable.Models.DepartmentSubjectCombination", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectCombinationId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId", "SubjectCombinationId");

                    b.HasIndex("SubjectCombinationId");

                    b.ToTable("DepartmentSubjectCombinations");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int>("CourseUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExamDate")
                        .HasColumnType("date");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ExamId");

                    b.HasIndex("CourseUnitId")
                        .IsUnique();

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ExamTimeTable.Models.ExamRoom", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ExamId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("ExamRooms");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Invigilator", b =>
                {
                    b.Property<int>("InvigilatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvigilatorId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvigilatorId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Invigilators");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Programme", b =>
                {
                    b.Property<int>("ProgrammeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgrammeId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NumberOfStudents")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("ProgrammeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("YearId");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("ExamTimeTable.Models.ProgrammeCourseUnit", b =>
                {
                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int");

                    b.Property<int>("CourseUnitId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<string>("CustomCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ProgrammeCourseUnitId")
                        .HasColumnType("int");

                    b.HasKey("ProgrammeId", "CourseUnitId", "YearId");

                    b.HasIndex("CourseUnitId");

                    b.HasIndex("YearId");

                    b.ToTable("ProgrammeCourseUnits");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvigilatorId")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("InvigilatorId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ExamTimeTable.Models.SubjectCombination", b =>
                {
                    b.Property<int>("SubjectCombinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectCombinationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("NumberOfStudents")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int");

                    b.HasKey("SubjectCombinationId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("SubjectCombinations");
                });

            modelBuilder.Entity("ExamTimeTable.Models.SubjectCombinationCourseUnit", b =>
                {
                    b.Property<int>("SubjectCombinationId")
                        .HasColumnType("int");

                    b.Property<int>("CourseUnitId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.Property<string>("CustomCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SubjectCombinationCourseUnitId")
                        .HasColumnType("int");

                    b.HasKey("SubjectCombinationId", "CourseUnitId", "YearId");

                    b.HasIndex("CourseUnitId");

                    b.HasIndex("YearId");

                    b.ToTable("SubjectCombinationCourseUnits");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YearId");

                    b.ToTable("Years");

                    b.HasData(
                        new
                        {
                            YearId = 1,
                            Name = "HEAC"
                        },
                        new
                        {
                            YearId = 2,
                            Name = "Year 1"
                        },
                        new
                        {
                            YearId = 3,
                            Name = "Year 2"
                        },
                        new
                        {
                            YearId = 4,
                            Name = "Year 3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExamTimeTable.Models.ApplicationUser", b =>
                {
                    b.HasOne("ExamTimeTable.Models.Department", "Department")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ExamTimeTable.Models.Invigilator", "Invigilator")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("InvigilatorId");

                    b.HasOne("ExamTimeTable.Models.Programme", "Programme")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ProgrammeId");

                    b.HasOne("ExamTimeTable.Models.Year", "Year")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("YearId");

                    b.Navigation("Department");

                    b.Navigation("Invigilator");

                    b.Navigation("Programme");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ExamTimeTable.Models.DepartmentSubjectCombination", b =>
                {
                    b.HasOne("ExamTimeTable.Models.Department", "Department")
                        .WithMany("DepartmentSubjectCombinations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamTimeTable.Models.SubjectCombination", "SubjectCombination")
                        .WithMany("DepartmentSubjectCombinations")
                        .HasForeignKey("SubjectCombinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("SubjectCombination");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Exam", b =>
                {
                    b.HasOne("ExamTimeTable.Models.CourseUnit", "CourseUnit")
                        .WithOne("Exam")
                        .HasForeignKey("ExamTimeTable.Models.Exam", "CourseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseUnit");
                });

            modelBuilder.Entity("ExamTimeTable.Models.ExamRoom", b =>
                {
                    b.HasOne("ExamTimeTable.Models.Exam", "Exam")
                        .WithMany("ExamRooms")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamTimeTable.Models.Room", "Room")
                        .WithMany("ExamRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Invigilator", b =>
                {
                    b.HasOne("ExamTimeTable.Models.Department", "Department")
                        .WithMany("Invigilators")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Programme", b =>
                {
                    b.HasOne("ExamTimeTable.Models.Department", "Department")
                        .WithMany("Programmes")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamTimeTable.Models.Year", "Year")
                        .WithMany("Programmes")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ExamTimeTable.Models.ProgrammeCourseUnit", b =>
                {
                    b.HasOne("ExamTimeTable.Models.CourseUnit", "CourseUnit")
                        .WithMany("ProgrammeCourseUnits")
                        .HasForeignKey("CourseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamTimeTable.Models.Programme", "Programme")
                        .WithMany("ProgrammeCourseUnits")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamTimeTable.Models.Year", "Year")
                        .WithMany("ProgrammeCourseUnits")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseUnit");

                    b.Navigation("Programme");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Room", b =>
                {
                    b.HasOne("ExamTimeTable.Models.Invigilator", null)
                        .WithMany("Rooms")
                        .HasForeignKey("InvigilatorId");
                });

            modelBuilder.Entity("ExamTimeTable.Models.SubjectCombination", b =>
                {
                    b.HasOne("ExamTimeTable.Models.Programme", "Programme")
                        .WithMany("SubjectCombinations")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("ExamTimeTable.Models.SubjectCombinationCourseUnit", b =>
                {
                    b.HasOne("ExamTimeTable.Models.CourseUnit", "CourseUnit")
                        .WithMany("SubjectCombinationCourseUnits")
                        .HasForeignKey("CourseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamTimeTable.Models.SubjectCombination", "SubjectCombination")
                        .WithMany("SubjectCombinationCourseUnits")
                        .HasForeignKey("SubjectCombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamTimeTable.Models.Year", "Year")
                        .WithMany("SubjectCombinationCourseUnits")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseUnit");

                    b.Navigation("SubjectCombination");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExamTimeTable.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExamTimeTable.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamTimeTable.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExamTimeTable.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamTimeTable.Models.CourseUnit", b =>
                {
                    b.Navigation("Exam")
                        .IsRequired();

                    b.Navigation("ProgrammeCourseUnits");

                    b.Navigation("SubjectCombinationCourseUnits");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Department", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("DepartmentSubjectCombinations");

                    b.Navigation("Invigilators");

                    b.Navigation("Programmes");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Exam", b =>
                {
                    b.Navigation("ExamRooms");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Invigilator", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Programme", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("ProgrammeCourseUnits");

                    b.Navigation("SubjectCombinations");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Room", b =>
                {
                    b.Navigation("ExamRooms");
                });

            modelBuilder.Entity("ExamTimeTable.Models.SubjectCombination", b =>
                {
                    b.Navigation("DepartmentSubjectCombinations");

                    b.Navigation("SubjectCombinationCourseUnits");
                });

            modelBuilder.Entity("ExamTimeTable.Models.Year", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("ProgrammeCourseUnits");

                    b.Navigation("Programmes");

                    b.Navigation("SubjectCombinationCourseUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
